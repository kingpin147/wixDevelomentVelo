<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <title>Charts</title>
   <!-- Include Chart.js library -->
   <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body onload="ready()">
  <!-- Create a canvas element for the chart -->
  <canvas id="myChart" width="550 px" height=" 300 px"></canvas>

  <script>
    // Define the chart globally
    let myChart;

    // Wait for the document to load
    function ready() {
      const ctx = document.getElementById('myChart').getContext('2d');

      myChart = new Chart(ctx, {
        type: 'line',
        data: {
          labels: ['1st year', '2nd year', '3rd year', '4th year', '5th year' ],
          datasets: [
            {
              label: 'Expense ',
              data: [],
              backgroundColor: 'rgba(245, 219, 122, 1)',
              borderColor: 'rgba(245, 219, 122, 1)',
              borderWidth: 1
            },
            {
              label: 'Income',
              data: [],
              backgroundColor: 'rgba(102, 96, 151, 1)',
              borderColor: 'rgba(132, 116, 232, 1)',
              borderWidth: 1
            }
          ]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });

      window.onmessage = function(event) {
        if (Array.isArray(event.data)) {
          myChart.data.datasets[0].data = event.data;
          myChart.data.datasets[1].data = event.data.map((value, index) => value + event.data[index]); // Modify the data for the second line
          myChart.update();
        } else {
          console.log("HTML Element received a generic message:");
          console.log(event.data);
        }
      };

      function handleClick(e) {
        var activeBars = myChart.getElementAtEvent(e);
        if (activeBars.length > 0) {
          var value = myChart.config.data.datasets[activeBars[0]._datasetIndex].data[activeBars[0]._index];
          var label = activeBars[0]._model.label;
          window.parent.postMessage({
            "type": "click",
            "Label": label,
            "value": value
          }, "*");
        }
      }

      // Attach the click event listener to the canvas element
      ctx.canvas.addEventListener('click', handleClick);
      
      // Send a 'ready' message to the parent window
      window.parent.postMessage({"type": "ready"}, "*");
    }
  </script>  
</body>
</html>
